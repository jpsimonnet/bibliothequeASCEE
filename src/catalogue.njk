---
layout: layouts/base.njk
title: Catalogue complet
pagination:
  data: livres
  size: 48
  alias: livresPage
permalink: "/catalogue/{% if pagination.pageNumber > 0 %}page-{{ pagination.pageNumber + 1 }}/{% endif %}index.html"
---

<div class="catalogue-container">
  <h1>Catalogue</h1>
  <p>{{ livres.length }} livres disponibles</p>

  <div class="search-bar">
    <input 
      type="search" 
      id="searchInput" 
      placeholder="Rechercher..."
      autocomplete="off"
    >
    <div class="sort-buttons">
      <button class="sort-btn active" data-sort="default">Ordre par défaut</button>
      <button class="sort-btn" data-sort="titre">Trier par titre</button>
      <button class="sort-btn" data-sort="auteur">Trier par auteur</button>
      <button class="sort-btn" data-sort="annee">Trier par année</button>
    </div>
  </div>

  <div class="livres-grid" id="livresGrid">
    {% for livre in livresPage %}
      {% set globalIndex = loop.index0 + (pagination.pageNumber * 48) %}
      <article class="livre-card" 
        data-titre="{{ livre.nom | lower }}" 
        data-auteur="{{ livre.auteur | lower }}"
        data-annee="{{ livre.annee or '0' }}"
        data-ordre="{{ globalIndex }}">
        <a href="/livre/{{ globalIndex }}/">
          <div class="livre-card-cover">
            <img 
              src="/images/covers/{{ livre.id }}.webp" 
              alt="{{ livre.nom }}"
              loading="lazy"
              width="200"
              height="300"
              
            >
          </div>
          <div class="livre-card-info">
            <h3>{{ livre.nom }}</h3>
            <p>{{ livre.auteur }}</p>
          </div>
        </a>
      </article>
    {% endfor %}
  </div>

  <nav class="pagination">
    {% if pagination.href.previous %}
      <a href="{{ pagination.href.previous }}">← Précédent</a>
    {% endif %}
    
    <span>Page {{ pagination.pageNumber + 1 }} sur {{ pagination.pages.length }}</span>
    
    {% if pagination.href.next %}
      <a href="{{ pagination.href.next }}">Suivant →</a>
    {% endif %}
  </nav>

</div>

<script>
const searchInput = document.getElementById('searchInput');
const sortButtons = document.querySelectorAll('.sort-btn');
const livresGrid = document.getElementById('livresGrid');
const cards = Array.from(document.querySelectorAll('.livre-card'));

let currentSort = 'default';

// Recherche
searchInput.addEventListener('input', filterBooks);

// Tri
sortButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    sortButtons.forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    currentSort = btn.dataset.sort;
    sortBooks();
  });
});

function filterBooks() {
  const searchTerm = searchInput.value.toLowerCase();
  cards.forEach(card => {
    const titre = card.dataset.titre;
    const auteur = card.dataset.auteur;
    const matches = titre.includes(searchTerm) || auteur.includes(searchTerm);
    card.style.display = matches ? 'block' : 'none';
  });
}

function sortBooks() {
  const sorted = [...cards].sort((a, b) => {
    let valA, valB;
    
    switch(currentSort) {
      case 'titre':
        valA = a.dataset.titre;
        valB = b.dataset.titre;
        return valA.localeCompare(valB);
        
      case 'auteur':
        valA = a.dataset.auteur;
        valB = b.dataset.auteur;
        return valA.localeCompare(valB);
        
      case 'annee':
        valA = parseInt(a.dataset.annee) || 0;
        valB = parseInt(b.dataset.annee) || 0;
        return valB - valA; // Plus récent en premier
        
      default:
        valA = parseInt(a.dataset.ordre);
        valB = parseInt(b.dataset.ordre);
        return valA - valB;
    }
  });
  
  sorted.forEach(card => livresGrid.appendChild(card));
}
</script>
